import json
import boto3
import uuid
from boto3.dynamodb.conditions import Attr

# DynamoDB resource for table operations (put, delete, scan)
dynamodb = boto3.resource('dynamodb')
goals_table = dynamodb.Table('NMB_CUSTOMERS_GOALS')
initiatives_table = dynamodb.Table('NMB_BUSINESS_INITIATIVES')
links_table = dynamodb.Table('NMB_CUSTOMERGOALS_INITIATIVES')

# DynamoDB client for batch_get_item
dynamodb_client = boto3.client('dynamodb')

def lambda_handler(event, context):
    print("Full Event:", json.dumps(event))  # üîç Debug full event

    query_params = event.get('queryStringParameters') or {}
    print("Query Parameters:", query_params)

    # ‚úÖ FIX: Get HTTP method safely (fallback for test-invoke)
    method = event.get('httpMethod') or event.get('requestContext', {}).get('http', {}).get('method')
    print(f"HTTP Method: {method}")

    if method == 'GET':
        if 'initiative_code' in query_params:
            return handle_get_goals(query_params['initiative_code'])
        elif 'goal_code' in query_params:
            return handle_get_initiatives(query_params['goal_code'])
        else:
            return response(400, {'message': 'Missing initiative_code or goal_code'})

    elif method == 'POST':
        return handle_post_link(event)

    elif method == 'DELETE':
        return handle_delete_link(event)

    else:
        return response(405, {'message': 'Method Not Allowed'})

def handle_get_goals(initiative_code):
    try:
        linked_resp = links_table.scan(
            FilterExpression=Attr('INITIATIVE_CODE').eq(initiative_code)
        )
        linked_items = linked_resp.get('Items', [])
        goal_codes = [item['CUSGOA_CODE'] for item in linked_items if 'CUSGOA_CODE' in item]

        if not goal_codes:
            return response(200, {'goals': []})

        # Format keys for batch_get_item
        keys = [{'CUSGOA_CODE': {'S': code}} for code in goal_codes]

        resp = dynamodb_client.batch_get_item(
            RequestItems={goals_table.name: {'Keys': keys}}
        )
        goals = resp['Responses'].get(goals_table.name, [])
        return response(200, {'goals': goals})

    except Exception as e:
        return response(500, {'message': 'Error retrieving goals', 'error': str(e)})

def handle_get_initiatives(goal_code):
    try:
        linked_resp = links_table.scan(
            FilterExpression=Attr('CUSGOA_CODE').eq(goal_code)
        )
        linked_items = linked_resp.get('Items', [])
        initiative_codes = [item['INITIATIVE_CODE'] for item in linked_items if 'INITIATIVE_CODE' in item]

        if not initiative_codes:
            return response(200, {'initiatives': []})

        keys = [{'INITIATIVE_CODE': {'S': code}} for code in initiative_codes]

        resp = dynamodb_client.batch_get_item(
            RequestItems={initiatives_table.name: {'Keys': keys}}
        )
        initiatives = resp['Responses'].get(initiatives_table.name, [])
        return response(200, {'initiatives': initiatives})

    except Exception as e:
        return response(500, {'message': 'Error retrieving initiatives', 'error': str(e)})

def handle_post_link(event):
    try:
        body = json.loads(event.get('body') or '{}')
        initiative_code = body.get('initiative_code')
        goal_code = body.get('goal_code')

        if not initiative_code or not goal_code:
            return response(400, {'message': 'initiative_code and goal_code are required'})

        link_code = str(uuid.uuid4())

        links_table.put_item(
            Item={
                'CSGLIN_CODE': link_code,
                'INITIATIVE_CODE': initiative_code,
                'CUSGOA_CODE': goal_code
            }
        )
        return response(201, {'message': 'Link created successfully', 'link_code': link_code})

    except Exception as e:
        return response(500, {'message': 'Error creating link', 'error': str(e)})

def handle_delete_link(event):
    try:
        body = json.loads(event.get('body') or '{}')
        link_code = body.get('link_code')

        if not link_code:
            return response(400, {'message': 'link_code is required for deletion'})

        links_table.delete_item(Key={'CSGLIN_CODE': link_code})
        return response(200, {'message': 'Link deleted successfully'})

    except Exception as e:
        return response(500, {'message': 'Error deleting link', 'error': str(e)})

def response(status_code, body):
    return {
        'statusCode': status_code,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps(body)
    }
