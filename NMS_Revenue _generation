import json
import boto3
import datetime
from boto3.dynamodb.conditions import Attr

dynamodb = boto3.resource('dynamodb', region_name='us-east-2')
table_header = dynamodb.Table('NMB_BCB_HEADER')
table_detail = dynamodb.Table('NMB_BCB_DETAILS')

from decimal import Decimal

def decimal_default(obj):
    if isinstance(obj, Decimal):
        if obj % 1 == 0:
            return int(obj)
        else:
            return float(obj)
    raise TypeError

def get_current_timestamp():
    return datetime.datetime.utcnow().isoformat()

def get_user_identity(event):
    return event.get('requestContext', {}).get('authorizer', {}).get('claims', {}).get('cognito:username', 'unknown')

def get_next_id(table, id_field):
    # Scan entire table to find max ID
    response = table.scan(
        ProjectionExpression=id_field
    )
    items = response.get('Items', [])
    max_id = 0
    for item in items:
        try:
            val = int(item.get(id_field, 0))
            if val > max_id:
                max_id = val
        except Exception:
            continue
    return max_id + 1

def lambda_handler(event, context):
    try:
        method = event.get('httpMethod', '')
        user = get_user_identity(event)
        now = get_current_timestamp()

        if method == 'GET':
            # Get CSGLINCBH_CODE from query params
            params = event.get('queryStringParameters') or {}
            csglin_code = params.get('CSGLINCBH_CODE') or params.get('code')
            if not csglin_code:
                return {
                    "statusCode": 400,
                    "body": json.dumps({"message": "CSGLINCBH_CODE is required"})
                }

            # Fetch header by key
            header_resp = table_header.get_item(Key={'CSGLINCBH_CODE': csglin_code})
            header = header_resp.get('Item')
            if not header:
                return {
                    "statusCode": 404,
                    "body": json.dumps({"message": "Header not found"})
                }

            # Scan details with filter on CSGLINCBH_CODE
            details_resp = table_detail.scan(
                FilterExpression=Attr('CSGLINCBH_CODE').eq(csglin_code)
            )
            details = details_resp.get('Items', [])

            return {
                "statusCode": 200,
                "body": json.dumps({"header": header, "details": details}, default=decimal_default)
            }

        elif method == 'POST':
            # Expect JSON body
            body = json.loads(event.get('body') or '{}')

            # === HEADER creation ===
            # Generate CSGLINCBH_ID max+1
            new_header_id = get_next_id(table_header, 'CSGLINCBH_ID')

            csglin_code = body.get('CSGLINCBH_CODE')
            if not csglin_code:
                return {
                    "statusCode": 400,
                    "body": json.dumps({"message": "CSGLINCBH_CODE is required in body"})
                }

            header_item = {
                'CSGLINCBH_ID': new_header_id,
                'CSGLINCBH_CODE': csglin_code,
                'DEPARTMENT': body.get('DEPARTMENT', ''),
                'TIMELINE': body.get('TIMELINE', ''),
                'OWNER': body.get('OWNER', ''),
                'DESCRIPTION': body.get('DESCRIPTION', ''),
                'SUMMARY': body.get('SUMMARY', ''),
                'CREATETS': now,
                'UPDATETS': '',
                'CREATEDBY': user,
                'UPDATEDBY': '',
                'ATTRIBUTE01': body.get('ATTRIBUTE01', '')
            }

            table_header.put_item(Item=header_item)

            # === DETAILS creation ===
            details_list = body.get('details', [])  # expecting a list of detail objects
            created_details = []

            for d in details_list:
                new_detail_id = get_next_id(table_detail, 'CSGLINCBD_ID')

                # Compose CSGLINCBD_CODE as CSGLINCBH_CODE + '-' + CSGLINCBD_ID
                detail_code = f"{csglin_code}-{new_detail_id}"

                detail_item = {
                    'CSGLINCBD_ID': new_detail_id,
                    'CSGLINCBD_CODE': detail_code,
                    'CSGLINCBH_CODE': csglin_code,
                    'CB_MODELTYPE': d.get('CB_MODELTYPE', ''),
                    'CB_DETAILTYPE': d.get('CB_DETAILTYPE', ''),
                    'NAME': d.get('NAME', ''),
                    'YEAR1': d.get('YEAR1', ''),
                    'YEAR2': d.get('YEAR2', ''),
                    'YEAR3': d.get('YEAR3', ''),
                    'YEAR4': d.get('YEAR4', ''),
                    'YEAR5': d.get('YEAR5', ''),
                    'CREATETS': now,
                    'UPDATETS': '',
                    'CREATEDBY': user,
                    'UPDATEDBY': '',
                    'ATTRIBUTE01': ''
                }

                table_detail.put_item(Item=detail_item)
                created_details.append(detail_item)

            return {
                "statusCode": 201,
                "body": json.dumps({"header": header_item, "details": created_details})
            }

        elif method == 'PUT':
            # Update existing header and details
            body = json.loads(event.get('body') or '{}')

            csglin_code = body.get('CSGLINCBH_CODE')
            if not csglin_code:
                return {
                    "statusCode": 400,
                    "body": json.dumps({"message": "CSGLINCBH_CODE is required for update"})
                }

            # Update header fields - only update fields if provided
            update_expression = []
            expression_attribute_values = {}
            expression_attribute_names = {}

            updatable_fields = ['DEPARTMENT', 'TIMELINE', 'OWNER', 'DESCRIPTION', 'SUMMARY', 'ATTRIBUTE01']

            for field in updatable_fields:
                if field in body:
                    update_expression.append(f"#{field} = :{field}")
                    expression_attribute_values[f":{field}"] = body[field]
                    expression_attribute_names[f"#{field}"] = field

            if not update_expression:
                return {
                    "statusCode": 400,
                    "body": json.dumps({"message": "No updatable header fields provided"})
                }

            # Add UPDATETS and UPDATEDBY
            update_expression.append("#UPDATETS = :updatets")
            update_expression.append("#UPDATEDBY = :updatedby")
            expression_attribute_values[":updatets"] = get_current_timestamp()
            expression_attribute_values[":updatedby"] = get_user_identity(event)
            expression_attribute_names["#UPDATETS"] = "UPDATETS"
            expression_attribute_names["#UPDATEDBY"] = "UPDATEDBY"

            update_expr = "SET " + ", ".join(update_expression)

            # Update header item
            table_header.update_item(
                Key={'CSGLINCBH_CODE': csglin_code},
                UpdateExpression=update_expr,
                ExpressionAttributeNames=expression_attribute_names,
                ExpressionAttributeValues=expression_attribute_values
            )

            # Update details if provided (list)
            details_list = body.get('details', [])
            updated_details = []

            for d in details_list:
                # Must have CSGLINCBD_CODE for update
                detail_code = d.get('CSGLINCBD_CODE')
                if not detail_code:
                    continue  # skip detail without key

                # Build update expressions for details
                det_update_expr = []
                det_expr_attr_vals = {}
                det_expr_attr_names = {}

                det_updatable_fields = ['CB_MODELTYPE', 'CB_DETAILTYPE', 'NAME', 'YEAR1', 'YEAR2', 'YEAR3', 'YEAR4', 'YEAR5', 'ATTRIBUTE01']

                for f in det_updatable_fields:
                    if f in d:
                        det_update_expr.append(f"#{f} = :{f}")
                        det_expr_attr_vals[f":{f}"] = d[f]
                        det_expr_attr_names[f"#{f}"] = f

                if not det_update_expr:
                    continue  # nothing to update

                det_update_expr.append("#UPDATETS = :updatets")
                det_update_expr.append("#UPDATEDBY = :updatedby")
                det_expr_attr_vals[":updatets"] = get_current_timestamp()
                det_expr_attr_vals[":updatedby"] = user
                det_expr_attr_names["#UPDATETS"] = "UPDATETS"
                det_expr_attr_names["#UPDATEDBY"] = "UPDATEDBY"

                det_update_expression = "SET " + ", ".join(det_update_expr)

                table_detail.update_item(
                    Key={'CSGLINCBD_CODE': detail_code},
                    UpdateExpression=det_update_expression,
                    ExpressionAttributeNames=det_expr_attr_names,
                    ExpressionAttributeValues=det_expr_attr_vals
                )
                # Optionally get updated detail - here just echo input
                updated_details.append(d)

            return {
                "statusCode": 200,
                "body": json.dumps({"message": "Update successful", "updated_header_code": csglin_code, "updated_details_count": len(updated_details)})
            }

        else:
            return {
                "statusCode": 405,
                "body": json.dumps({"message": "Method not allowed"})
            }

    except Exception as e:
        return {
            "statusCode": 500,
            "body": json.dumps({"message": "Internal server error", "error": str(e)})
        }
