import json
import boto3
import datetime
from decimal import Decimal
from botocore.exceptions import ClientError
from boto3.dynamodb.conditions import Attr

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('NMB_HEARTBEAT')

# JSON encoder to convert Decimal → int/float
class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Decimal):
            return int(obj) if obj % 1 == 0 else float(obj)
        return super().default(obj)

def get_cognito_username(event):
    try:
        return event['requestContext']['authorizer']['claims']['cognito:username']
    except Exception:
        return 'unknown_user'

def lambda_handler(event, context):
    try:
        http_method = event.get('httpMethod', '')
        user = get_cognito_username(event)

        # ── GET ───────────────────────────────────────
        if http_method == 'GET':
            params = event.get('queryStringParameters') or {}
            cust = params.get('CUSTOMER_CODE')

            if not cust:
                return {
                    'statusCode': 400,
                    'body': json.dumps({'error': 'CUSTOMER_CODE is required as query parameter'})
                }

            response = table.scan(
                FilterExpression=Attr("CUSTOMER_CODE").eq(cust)
            )
            items = response.get('Items', [])
            return {
                'statusCode': 200,
                'body': json.dumps(items, cls=DecimalEncoder),
                'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        }
            }

        # ── POST ──────────────────────────────────────
        elif http_method == 'POST':
            body = json.loads(event.get('body', '{}'))

            # 1) compute new incremental HEARTBEAT_ID
            scan_resp = table.scan(ProjectionExpression="HEARTBEAT_ID")
            ids = []
            for it in scan_resp.get('Items', []):
                try:
                    ids.append(int(it['HEARTBEAT_ID']))
                except:
                    pass
            new_id = max(ids, default=0) + 1
            now = datetime.datetime.utcnow().isoformat()

            # 2) assemble item
            item = {
                'HEARTBEAT_ID': new_id,
                'CUSTOMER_CODE': body.get('CUSTOMER_CODE', ''),
                'ALERTADVICE01_HEADING': body.get('ALERTADVICE01_HEADING', ''),
                'ALERTADVICE01_DETAIL': body.get('ALERTADVICE01_DETAIL', ''),
                'ALERTADVICE02_HEADING': body.get('ALERTADVICE02_HEADING', ''),
                'ALERTADVICE02_DETAIL': body.get('ALERTADVICE02_DETAIL', ''),
                'ALERTADVICE03_HEADING': body.get('ALERTADVICE03_HEADING', ''),
                'ALERTADVICE03_DETAIL': body.get('ALERTADVICE03_DETAIL', ''),
                'ALERTADVICE04_HEADING': body.get('ALERTADVICE04_HEADING', ''),
                'ALERTADVICE04_DETAIL': body.get('ALERTADVICE04_DETAIL', ''),
                'ALERTADVICE05_HEADING': body.get('ALERTADVICE05_HEADING', ''),
                'ALERTADVICE05_DETAIL': body.get('ALERTADVICE05_DETAIL', ''),
                'CREATETS': now,
                'UPDATETS': '',
                'CREATEDBY': user,
                'UPDATEDBY': '',
                'ATTRIBUTE01': ''
            }
            table.put_item(Item=item)
            return {
                'statusCode': 200,
                'body': json.dumps({'message': 'created'}, cls=DecimalEncoder),
                'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        }
            }

        # ── PUT ───────────────────────────────────────
        elif http_method == 'PUT':
            body = json.loads(event.get('body', '{}'))
            hb = body.get('HEARTBEAT_ID')
            if hb is None:
                return {
                    'statusCode': 400,
                    'body': json.dumps({'error': 'HEARTBEAT_ID is required'})
                }

            now = datetime.datetime.utcnow().isoformat()

            expr_parts = []
            vals = {}
            names = {}

            # Build update expressions excluding system fields UPDATEDBY and UPDATETS
            for k, v in body.items():
                if k != 'HEARTBEAT_ID' and k not in ('UPDATEDBY', 'UPDATETS'):
                    expr_parts.append(f"#attr_{k} = :{k}")
                    vals[f":{k}"] = v
                    names[f"#attr_{k}"] = k

            # Add system-managed fields with unique aliases to avoid path overlap
            expr_parts.append("#UB = :ub")
            vals[":ub"] = user
            names["#UB"] = "UPDATEDBY"

            expr_parts.append("#UT = :ut")
            vals[":ut"] = now
            names["#UT"] = "UPDATETS"

            update_expr = "SET " + ", ".join(expr_parts)

            table.update_item(
                Key={'HEARTBEAT_ID': int(hb)},
                UpdateExpression=update_expr,
                ExpressionAttributeNames=names,
                ExpressionAttributeValues=vals
            )
            return {
                'statusCode': 200,
                'body': json.dumps({'message': 'Item updated successfully'}, cls=DecimalEncoder),
                'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        }
            }

        # ── DELETE ────────────────────────────────────
        elif http_method == 'DELETE':
            params = event.get('queryStringParameters') or {}
            cust = params.get('CUSTOMER_CODE')
            if not cust:
                return {
                    'statusCode': 400,
                    'body': json.dumps({'error': 'CUSTOMER_CODE is required'})
                }

            to_del = table.scan(
                FilterExpression=Attr('CUSTOMER_CODE').eq(cust),
                ProjectionExpression='HEARTBEAT_ID'
            ).get('Items', [])

            with table.batch_writer() as bw:
                for it in to_del:
                    bw.delete_item(Key={'HEARTBEAT_ID': int(it['HEARTBEAT_ID'])})

            return {
                'statusCode': 200,
                'body': json.dumps({'message': f"Deleted {len(to_del)} record(s) for {cust}"}),
                'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        }
            }

        # ── OTHER METHODS ─────────────────────────────
        else:
            return {
                'statusCode': 405,
                'body': json.dumps({'error': 'Method not allowed'})
            }

    except ClientError as ce:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(ce)})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }

##post
{
  "httpMethod": "POST",
  "body": "{\"CUSTOMER_CODE\":\"NMB1\",\"ALERTADVICE01_HEADING\":\"Heading 1\",\"ALERTADVICE01_DETAIL\":\"Detail 1\",\"ALERTADVICE02_HEADING\":\"Heading 2\",\"ALERTADVICE02_DETAIL\":\"Detail 2\",\"ALERTADVICE03_HEADING\":\"Heading 3\",\"ALERTADVICE03_DETAIL\":\"Detail 3\",\"ALERTADVICE04_HEADING\":\"Heading 4\",\"ALERTADVICE04_DETAIL\":\"Detail 4\",\"ALERTADVICE05_HEADING\":\"Heading 5\",\"ALERTADVICE05_DETAIL\":\"Detail 5\",\"CREATETS\":\"2025-05-23T15:30:00Z\",\"UPDATETS\":\"2025-05-23T15:30:00Z\",\"CREATEDBY\":\"user1\",\"UPDATEDBY\":\"user1\",\"ATTRIBUTE01\":\"Additional info\"}"
}


##put
{
  "httpMethod": "PUT",
  "body": "{\"HEARTBEAT_ID\": 3, \"CUSTOMER_CODE\": \"NMB1\", \"ALERTADVICE01_HEADING\": \"Updated Heading 1\", \"ALERTADVICE01_DETAIL\": \"Updated Detail 1\", \"ALERTADVICE02_HEADING\": \"Updated Heading 2\", \"ALERTADVICE02_DETAIL\": \"Updated Detail 2\", \"UPDATEDBY\": \"user2\", \"ATTRIBUTE01\": \"Updated additional info\"}"
}

##get
###GET
{
  "httpMethod": "GET",
  "queryStringParameters": {
    "CUSTOMER_CODE": "NMB0987"
  }
}


##delete
{
  "httpMethod": "DELETE",
  "queryStringParameters": {
    "CUSTOMER_CODE": "NMB1"
  }
}

#API POST
{
  "CUSTOMER_CODE": "NMB16",
  "ALERTADVICE01_HEADING": "Heading 1",
  "ALERTADVICE01_DETAIL": "Detail 1",
  "ALERTADVICE02_HEADING": "Heading 2",
  "ALERTADVICE02_DETAIL": "Detail 2",
  "ALERTADVICE03_HEADING": "Heading 3",
  "ALERTADVICE03_DETAIL": "Detail 3",
  "ALERTADVICE04_HEADING": "Heading 4",
  "ALERTADVICE04_DETAIL": "Detail 4",
  "ALERTADVICE05_HEADING": "Heading 5",
  "ALERTADVICE05_DETAIL": "Detail 5",
  "CREATETS": "2025-05-23T15:30:00Z",
  "UPDATETS": "2025-05-23T15:30:00Z",
  "CREATEDBY": "user1",
  "UPDATEDBY": "user1",
  "ATTRIBUTE01": "Additional info"
}

#API PUT

